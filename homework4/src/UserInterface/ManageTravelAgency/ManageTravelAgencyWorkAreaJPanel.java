/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageTravelAgency;

import Business.FlSchedule;
import Business.Flight;
import Business.MsSchedule;
import Business.TravelAgency;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ManageTravelAgencyWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageTravelAgencyWorkAreaJPanel
     */
    private JPanel CardSequenceJPanel;
    private FlSchedule flschedule;
    private MsSchedule msschedule;
    private Flight flight;
    public ManageTravelAgencyWorkAreaJPanel(JPanel CardSequenceJPanel,FlSchedule flschedule, MsSchedule msschedule) {
        initComponents();
        this.CardSequenceJPanel = CardSequenceJPanel;
        this.flschedule = flschedule;
        this.msschedule = msschedule;
        populateTable();
    }
    

    private void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel) tblAll.getModel();
        dtm.setRowCount(0);
        for(Flight flight:msschedule.getMsschedule()){
            Object[] row = new Object[11];
            row[0] = flight.getSerialNumber();
            row[1] = flight.getAirplane().getModelNumber();
            row[2] = flight.getTakeoffdate();
            row[3] = flight.getTakeofftime();
            row[4] = flight.getAirplane().getManufacturer();
            row[5] = flight.getAirplane().getManufacturedYear();
            row[6] = flight.getTakeoffairport();
            row[7] = flight.getArriveairport();
            row[8] = flight.getAirplane().getSeatnum();
            row[9] = flight.getAirplane().getAirlinerName();
            row[10] = flight;
            dtm.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAll = new javax.swing.JTable();
        txtTakeOffAirport = new javax.swing.JTextField();
        txtArrivalAirport = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("take off airport:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jLabel3.setText("arrival airport:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, -1, -1));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        tblAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "serial number", "model number", "take off date", "take off time", "manufacturer", "manufactured year", "take off airport", "arrive airport", "seats number", "airliner", "flightID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAll);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 750, 360));
        add(txtTakeOffAirport, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 80, -1));
        add(txtArrivalAirport, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 80, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String takeoffairport = txtTakeOffAirport.getText();
        String arrivalairport = txtArrivalAirport.getText();
        MsSchedule temp = new MsSchedule();
        for(Flight flight:msschedule.getMsschedule()){
            if((takeoffairport.equalsIgnoreCase(flight.getTakeoffairport())) && arrivalairport.equalsIgnoreCase(flight.getArriveairport())){
            temp.getMsschedule().add(flight);
        }
        }
        if(!temp.getMsschedule().isEmpty()){
            DefaultTableModel dtm = (DefaultTableModel) tblAll.getModel();
            dtm.setRowCount(0);
            for(Flight flight:temp.getMsschedule()){
            Object[] row = new Object[11];
            row[0] = flight.getSerialNumber();
            row[1] = flight.getAirplane().getModelNumber();
            row[2] = flight.getTakeoffdate();
            row[3] = flight.getTakeofftime();
            row[4] = flight.getAirplane().getManufacturer();
            row[5] = flight.getAirplane().getManufacturedYear();
            row[6] = flight.getTakeoffairport();
            row[7] = flight.getArriveairport();
            row[8] = flight.getAirplane().getSeatnum();
            row[9] = flight.getAirplane().getAirlinerName();
            row[10] = flight;
            dtm.addRow(row);
        }
        }
        else{
            JOptionPane.showMessageDialog(null,"the flights you search do not exist");
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAll;
    private javax.swing.JTextField txtArrivalAirport;
    private javax.swing.JTextField txtTakeOffAirport;
    // End of variables declaration//GEN-END:variables
}
