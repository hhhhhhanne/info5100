/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.ServiceRole;

import Business.Account.Account;
import Business.Business;
import Business.Enterprise.Agent;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Government;
import Business.Food.FoodInventory;
import Business.Order.Order;
import Business.Organization.Organization;
import Business.Person.BenefitPerson;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chance
 */
public class ServiceOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ServiceOrderJPanel
     */
private JPanel userProcessContainer;
    private Business business;
    private BenefitPerson benefitperson;
    private Account account;
    private Enterprise enterprise;
    private Organization organization;
    private Government government;
    
    private ArrayList<FoodInventory> foodInventory;
    public ServiceOrderJPanel(JPanel userProcessContainer, Account account, BenefitPerson benefitperson, Organization organization, Enterprise enterprise, Government government, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.benefitperson = benefitperson;
        this.organization = organization;
        this.enterprise = enterprise;
        this.business = business;
        this.government = government;
        
        this.labelBenefitPerson.setText(this.benefitperson.getName());
        this.foodInventory = new ArrayList<>();
        
        this.populateFoodInventoryTable();
        this.populateCartTabel();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InventoryTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        spAddQuantity = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        spUpdateQuantity = new javax.swing.JSpinner();
        btnUpdate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        labelTotal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        labelOrderBalance = new javax.swing.JLabel();
        btnConfirm = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        Title1 = new javax.swing.JLabel();
        labelBenefitPerson = new javax.swing.JLabel();

        Title.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        Title.setText("Inventory");

        InventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Food", "Inventory", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(InventoryTable);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel1.setText("Quantity:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cart"));

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Food", "Inventory", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cartTable);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel2.setText("Total Price:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel3.setText("Update Quantity:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Balance After Order"));

        labelOrderBalance.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(labelOrderBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(labelOrderBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labelTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(spUpdateQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spUpdateQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(62, 62, 62))
        );

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        Title1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        Title1.setText("BenefitPerson:");

        labelBenefitPerson.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(125, 125, 125)
                                .addComponent(Title1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelBenefitPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(spAddQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Title1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBenefitPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spAddQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnConfirm))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Agent agent = (Agent)this.enterprise;
        for(FoodInventory foodinv: this.foodInventory) {
            for(FoodInventory agentInv: agent.getInventoryList()) {
                if(foodinv.getFood() == agentInv.getFood()) {
                    agentInv.setQuantity(agentInv.getQuantity() + foodinv.getQuantity());
                }
            }
        }
        this.foodInventory = new ArrayList<>();
        
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int index = this.InventoryTable.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "please select a row");
            return;
        }
        FoodInventory foodInv = (FoodInventory)this.InventoryTable.getValueAt(index, 0);
        int quantity = (Integer)this.spAddQuantity.getValue();
        if(quantity <= 0) {
            JOptionPane.showMessageDialog(null, "Food quantity can't less than 0 or equal to 0.");
            return;
        }
        Agent agent = (Agent)this.enterprise;
        for(FoodInventory food: agent.getInventoryList()) {
            if(food == foodInv) {
                if(food.getQuantity() >= quantity) {
                    food.setQuantity(food.getQuantity() - quantity);
                    FoodInventory foodItem = null;
                    for(FoodInventory existfood: this.foodInventory) {
                        if(existfood.getFood() == food.getFood()) {
                            foodItem = existfood;
                            existfood.setQuantity(existfood.getQuantity()+quantity);
                        }
                    }
                    if(foodItem == null) {
                        foodItem = new FoodInventory(food.getFood(), quantity);
                        this.foodInventory.add(foodItem);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No enough food in agent inventory.");
                    return ;
                }
            }
        }
        this.populateCartTabel();
        this.populateFoodInventoryTable();
        this.populateTotal();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int index = this.cartTable.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "please select a row");
            return;
        }
        FoodInventory foodInv = (FoodInventory)this.cartTable.getValueAt(index, 0);
        int quantity = (Integer)this.spUpdateQuantity.getValue();
        if(quantity < 0) {
            JOptionPane.showMessageDialog(null, "Food quantity can't less than 0.");
            return;
        }
        Agent agent = (Agent)this.enterprise;
        int change = 0;
        for(FoodInventory agentInventory: agent.getInventoryList()){
            if(foodInv.getFood() == agentInventory.getFood()) {
                change = foodInv.getQuantity() - quantity;
                if((foodInv.getQuantity() +  agentInventory.getQuantity()) >= quantity) {
                    foodInv.setQuantity(quantity);
                    agentInventory.setQuantity(agentInventory.getQuantity() + change);
                } else {
                    JOptionPane.showMessageDialog(null, "Not enough inventory food in this agent. please decrease quantity.");
                }
            }
        }
        
        this.populateCartTabel();
        this.populateFoodInventoryTable();
        this.populateTotal();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        if(this.foodInventory.size() == 0 ){
            JOptionPane.showMessageDialog(null, "Please order some food before submit.");
            return ;
        }
        
        double total = 0.00f;
        for(FoodInventory inventory : this.foodInventory) {
            if(inventory != null) {
                total += inventory.getQuantity() * inventory.getFood().getPrice();
            }
        }
        
        Agent agent = (Agent)this.enterprise;
        Order order = this.benefitperson.getOrderDirectory().addOrder(agent, benefitperson);
        if(order != null) {
            for(FoodInventory foodcart: this.foodInventory) {
                order.addFoodInventory(foodcart);
            }
        }
        
        this.benefitperson.setBalance(this.benefitperson.getBalance() - Float.valueOf(String.valueOf(total)));
        
        this.foodInventory = new ArrayList<>();
        
        this.populateCartTabel();
        this.populateFoodInventoryTable();
        this.populateTotal();
    }//GEN-LAST:event_btnConfirmActionPerformed
    
    public void populateFoodInventoryTable() {
        DefaultTableModel model = (DefaultTableModel) this.InventoryTable.getModel();
        Agent agent = (Agent)this.enterprise;
        
        model.setRowCount(0);
        for (FoodInventory inventory : agent.getInventoryList()) {
            Object[] row = new Object[3];
            row[0] = inventory;
            row[1] = inventory.getQuantity();
            row[2] = inventory.getFood().getPrice();
            model.addRow(row);
        }
    }
    
    public void populateCartTabel() {
        DefaultTableModel model = (DefaultTableModel) this.cartTable.getModel();
        
        model.setRowCount(0);
        for (FoodInventory inventory : this.foodInventory) {
            Object[] row = new Object[3];
            row[0] = inventory;
            row[1] = inventory.getQuantity();
            row[2] = inventory.getFood().getPrice();
            model.addRow(row);
        }
    }
    
    public void populateTotal() {
        double total = 0.00f;
        for(FoodInventory inventory : this.foodInventory) {
            if(inventory != null) {
                total += inventory.getQuantity() * inventory.getFood().getPrice();
            }
        }
        this.labelTotal.setText(new DecimalFormat("#.##").format(total));
        
        this.labelOrderBalance.setText(new DecimalFormat("#.##").format(this.benefitperson.getBalance() - total));
        if(this.benefitperson.getBalance() - total >= 0) {
            this.btnConfirm.setEnabled(true);
            this.labelOrderBalance.setForeground(Color.red);
        } else {
            this.btnConfirm.setEnabled(false);
            this.labelOrderBalance.setForeground(Color.green);
        }
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InventoryTable;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel Title1;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTable cartTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelBenefitPerson;
    private javax.swing.JLabel labelOrderBalance;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JSpinner spAddQuantity;
    private javax.swing.JSpinner spUpdateQuantity;
    // End of variables declaration//GEN-END:variables
}
